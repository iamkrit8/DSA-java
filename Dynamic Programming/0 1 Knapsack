link - https://www.codingninjas.com/codestudio/problems/0-1-knapsack_920542

import java.util.*;
public class Solution{
    static int knapsack(int[] weight, int[] value, int n, int maxWeight) {
        int[][] dp = new int[n][maxWeight+1];
        for(int[] row : dp){
            Arrays.fill(row, -1);
        }
        return helper(weight, value, n, maxWeight,n-1,dp);
    }
    static int helper(int[] weight, int[] value,int n, int bagweight, int i, int[][] dp){
         if(i==0){
            if(weight[0]<=bagweight){
                return value[0];
            }else{
                return 0;
            }
        }
        if(dp[i][bagweight]!=-1){
            return dp[i][bagweight];
        }
    int notpick = 0 + helper(weight, value, n, bagweight,i-1, dp);
    int pick = Integer.MIN_VALUE;
    if(weight[i]<=bagweight){
        pick = value[i]+helper(weight, value,n,bagweight-weight[i], i-1, dp);
    }
    return dp[i][bagweight] = Math.max(notpick, pick);
        
    }    
}
