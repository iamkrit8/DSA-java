
import java.util.*;
class Solution {
    public int coinChange(int[] coins, int amount) {
        int[][] dp = new int[coins.length][amount+1];
        for(int[] row : dp){
            Arrays.fill(row, -1);
        }
        
        int ans = allcoins(coins, amount, coins.length-1, dp);
        if(ans>=(int)Math.pow(10,9))return -1;
        
        
        return ans;
    }
    static int allcoins(int[] nums, int target, int i, int[][] dp){
         if(i==0){
            if(target%nums[i]==0){
                return target/nums[i];
            }
            else {
                return (int)Math.pow(10,9);
            }
        }
        if(dp[i][target]!=-1){
            return dp[i][target];
        }
        
        int notpick = 0 + allcoins(nums,target,i-1, dp);
        int pick = (int)Math.pow(10,9);
        if(target>=nums[i]){
            pick = 1 + allcoins(nums, target-nums[i], i, dp);
        }
        return dp[i][target] = Math.min(pick, notpick);
    }
}
