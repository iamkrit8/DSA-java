class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        
        int[][] dp =  new int [m][n];
        for(int[] row : dp){
            Arrays.fill(row, -1);
        }
        
        return allpath(m-1, n-1, obstacleGrid, dp);
    }
     static int allpath(int i, int j, int[][] obstacleGrid, int[][] dp){
        if (i == 0 && j == 0) {
            if (obstacleGrid[i][j] == 1) {
                return 0;
            }
            return 1;
        }
        if(i<0 || j<0)return 0;
        if(obstacleGrid[i][j]==1)return 0;

        if(dp[i][j]!=-1) return dp[i][j];
        
        int up = obstacleGrid[i][j] + allpath(i-1, j, obstacleGrid, dp);
        int left = obstacleGrid[i][j] + allpath(i, j-1, obstacleGrid, dp);
        
        int count = up + left;
        
        return dp[i][j] = count;
    } 
}
