import java.util.*;
class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int[][] dp = new int[text1.length()][text2.length()];
        for(int[] row : dp){
            Arrays.fill(row, -1);
        }
        return lcs(text1, text2, text1.length()-1, text2.length()-1, dp);
    }
    static int lcs(String t1, String t2, int i1, int i2, int[][] dp){
        //using recursion
        //base case-
        
        if(i1<0 || i2<0){
            return 0;
        }
        
        if(dp[i1][i2]!=-1){
            return dp[i1][i2];
        }
        
        //if String Matches
        int match =0;
        int notmatch =0;
        if(t1.charAt(i1) == t2.charAt(i2)){
            match = 1 + lcs(t1, t2, i1-1, i2-1, dp);
        } else{
            notmatch = Math.max(lcs(t1, t2, i1-1, i2, dp), lcs(t1, t2, i1, i2-1, dp)); 
        }
        return dp[i1][i2] = match + notmatch;
    }
}
